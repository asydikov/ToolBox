// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200225233110_Schedule_Added")]
    partial class Schedule_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67a65524-de22-45e7-ab19-6ea6d908084a"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(5844),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(5863)
                        },
                        new
                        {
                            Id = new Guid("7c621003-29b4-41c0-bf61-321ce440c324"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7825),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7831)
                        },
                        new
                        {
                            Id = new Guid("01de20a8-bbec-4230-8a94-1cec2bbe3e5c"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7908),
                            IsActive = true,
                            Name = "modeldb",
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7909)
                        },
                        new
                        {
                            Id = new Guid("f59183f2-aa8f-47e9-9623-147193064b72"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7934),
                            IsActive = true,
                            Name = "msdb",
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(7935)
                        },
                        new
                        {
                            Id = new Guid("a26e1e2d-3372-44fe-acbc-ae3d7ab57a04"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(8005),
                            IsActive = true,
                            Name = "tempdb",
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 85, DateTimeKind.Utc).AddTicks(8006)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbc5bcaf-845d-4f90-a3f4-009520687a60"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 86, DateTimeKind.Utc).AddTicks(9217),
                            Interval = 5,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 2, 25, 23, 31, 10, 86, DateTimeKind.Local).AddTicks(9830),
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 86, DateTimeKind.Utc).AddTicks(9224)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("bbc5bcaf-845d-4f90-a3f4-009520687a60"),
                            ServerId = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("bbc5bcaf-845d-4f90-a3f4-009520687a60"),
                            SqlQueryId = new Guid("9edf1682-53af-495b-b99b-ed2513e7a3db")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8a082a8-c274-4872-a5e1-aa6bf6ac2999"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 83, DateTimeKind.Utc).AddTicks(5049),
                            Host = "localhost",
                            IsActive = true,
                            Login = "sa",
                            Name = "Sql monitor server",
                            Password = "Pass_w0rd12",
                            Port = 1465,
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 83, DateTimeKind.Utc).AddTicks(6728),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9edf1682-53af-495b-b99b-ed2513e7a3db"),
                            CreatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 86, DateTimeKind.Utc).AddTicks(1117),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = "sp_databases",
                            Query = "sp_databases",
                            UpdatedDate = new DateTime(2020, 2, 25, 23, 31, 10, 86, DateTimeKind.Utc).AddTicks(1143)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
