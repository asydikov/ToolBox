// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200302204534_DatabasesList_Query_Removed_SqlQueries")]
    partial class DatabasesList_Query_Removed_SqlQueries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2403d389-24ff-46bc-b56a-a1478b3df290"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(3637),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(3664)
                        },
                        new
                        {
                            Id = new Guid("2d340c1b-5632-4139-9ef0-ffb00d5d1b07"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6473),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6479)
                        },
                        new
                        {
                            Id = new Guid("c7bd44b1-7b3c-4c2f-977d-d953a6b0a218"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6573),
                            IsActive = true,
                            Name = "modeldb",
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6574)
                        },
                        new
                        {
                            Id = new Guid("2019191b-1483-4d00-bcd9-2676b146dfa2"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6600),
                            IsActive = true,
                            Name = "msdb",
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6602)
                        },
                        new
                        {
                            Id = new Guid("9b776696-7130-411c-ae29-19ff05851d1e"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6625),
                            IsActive = true,
                            Name = "tempdb",
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 769, DateTimeKind.Utc).AddTicks(6626)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 771, DateTimeKind.Utc).AddTicks(1792),
                            Interval = 4,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 3, 2, 20, 45, 33, 771, DateTimeKind.Local).AddTicks(2431),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 771, DateTimeKind.Utc).AddTicks(1799)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            ServerId = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            SqlQueryId = new Guid("6b981c8e-5699-4392-bf08-839e67c5bab0")
                        },
                        new
                        {
                            ScheduleId = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            SqlQueryId = new Guid("2f5b1a14-6a42-497d-abfb-4b5ab5d44162")
                        },
                        new
                        {
                            ScheduleId = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            SqlQueryId = new Guid("9e63cb85-82b7-4632-a3c5-274482536683")
                        },
                        new
                        {
                            ScheduleId = new Guid("b7ce20a2-813b-40ab-89e0-8159f2651a2e"),
                            SqlQueryId = new Guid("600e16b6-d7ed-417f-9d8c-8fda41a3ae92")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8158adeb-d343-409e-8b9c-446edb50d62f"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 767, DateTimeKind.Utc).AddTicks(3557),
                            Host = "localhost",
                            IsActive = true,
                            Login = "sa",
                            Name = "Sql monitor server",
                            Password = "Pass_w0rd12",
                            Port = 1465,
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 767, DateTimeKind.Utc).AddTicks(5286),
                            UserId = new Guid("d2b248e2-07a5-4d2c-b4d4-d933a84ee5f6")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21102ac6-1c4b-4aad-8384-ed9da76013c8"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5378),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 1,
                            Query = "EXEC sp_databases",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5383)
                        },
                        new
                        {
                            Id = new Guid("6b981c8e-5699-4392-bf08-839e67c5bab0"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5432),
                            Description = "Needs to be executed with keyword use [DATABASE_NAME]. Database space information",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 3,
                            Query = "EXEC sp_spaceused @oneresultset = 1",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5434)
                        },
                        new
                        {
                            Id = new Guid("2f5b1a14-6a42-497d-abfb-4b5ab5d44162"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5436),
                            Description = "Databases backup status",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 2,
                            Query = @"SELECT d.name AS 'DATABASE_Name',
                          MAX(CASE WHEN bu.TYPE = 'D' THEN bu.LastBackupDate END) AS 'Full DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'I' THEN bu.LastBackupDate END) AS 'Differential DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'L' THEN bu.LastBackupDate END) AS 'Transaction DB Backup Status',
                          CASE d.recovery_model WHEN 1 THEN 'Full' WHEN 2 THEN 'Bulk Logged' WHEN 3 THEN 'Simple' END RecoveryModel
                          FROM MASTER.sys.databases d
                          LEFT OUTER JOIN (SELECT database_name, TYPE, MAX(backup_start_date) AS LastBackupDate
                          FROM msdb.dbo.backupset
                          GROUP BY database_name, TYPE) AS bu ON d.name = bu.database_name
                          GROUP BY d.Name, d.recovery_model",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5437)
                        },
                        new
                        {
                            Id = new Guid("9e63cb85-82b7-4632-a3c5-274482536683"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5439),
                            Description = "Finding users that are connected to the server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 4,
                            Query = @"SELECT login_name ,COUNT(session_id) AS session_count   
                          FROM sys.dm_exec_sessions
                          GROUP BY login_name; ",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5440)
                        },
                        new
                        {
                            Id = new Guid("600e16b6-d7ed-417f-9d8c-8fda41a3ae92"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5454),
                            Description = "Memory usage",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 6,
                            Query = @"SELECT object_name, counter_name, cntr_value
                            FROM sys.dm_os_performance_counters
                            WHERE [object_name] LIKE '%Buffer Manager%'
                            AND [counter_name] in ('Page life expectancy','Free list stalls/sec',
                            'Page reads/sec')",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5454)
                        },
                        new
                        {
                            Id = new Guid("3df485ec-0023-499a-88ce-3c575f2fefaa"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5451),
                            Description = "The most CPU consumed 20 queries",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 5,
                            Query = @"SELECT TOP 20 query_stats.query_hash AS 'Query Hash',   
	                        	SUM(query_stats.total_worker_time) / SUM(query_stats.execution_count) AS 'Avg CPU Time',  
	                        	MIN(query_stats.statement_text) AS 'Statement Text'  
	                        FROM   
	                        	(SELECT QS.*,   
	                        	SUBSTRING(ST.text, (QS.statement_start_offset/2) + 1,  
	                        	((CASE statement_end_offset   
	                        		WHEN -1 THEN DATALENGTH(ST.text)  
	                        		ELSE QS.statement_end_offset END   
	                        			- QS.statement_start_offset)/2) + 1) AS statement_text  
	                        	 FROM sys.dm_exec_query_stats AS QS  
	                        	 CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) as ST) as query_stats  
	                        GROUP BY query_stats.query_hash  
	                        ORDER BY 2 DESC;  
                        ",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(5451)
                        },
                        new
                        {
                            Id = new Guid("8b16f156-01d0-4c8c-a456-09982472b216"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(3248),
                            Description = "The name of a server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 0,
                            Query = "SELECT SERVERPROPERTY('Servername') as ServerName",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 45, 33, 770, DateTimeKind.Utc).AddTicks(3275)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
