// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200302205257_Update")]
    partial class Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1479e87e-edd1-4b30-aa3d-f00bcbec220d"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(2634),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(2661)
                        },
                        new
                        {
                            Id = new Guid("187f4da4-c3de-4bca-ab1e-bab221dc5125"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(4872),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(4879)
                        },
                        new
                        {
                            Id = new Guid("619e8b3a-c6ac-4b93-92e0-618056e863e9"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5006),
                            IsActive = true,
                            Name = "modeldb",
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5008)
                        },
                        new
                        {
                            Id = new Guid("dd7f133d-aaaa-48dc-af32-6b832c3454ff"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5034),
                            IsActive = true,
                            Name = "msdb",
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5035)
                        },
                        new
                        {
                            Id = new Guid("651460ef-9cff-4277-9284-fa4afad5c723"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5055),
                            IsActive = true,
                            Name = "tempdb",
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 616, DateTimeKind.Utc).AddTicks(5056)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 618, DateTimeKind.Utc).AddTicks(874),
                            Interval = 4,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 3, 2, 20, 52, 56, 618, DateTimeKind.Local).AddTicks(1504),
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 618, DateTimeKind.Utc).AddTicks(881)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            ServerId = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            SqlQueryId = new Guid("00eac203-337f-46bf-91c4-413aee272bb3")
                        },
                        new
                        {
                            ScheduleId = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            SqlQueryId = new Guid("22e55d5b-bc47-4090-adf0-fe9f72ce43fb")
                        },
                        new
                        {
                            ScheduleId = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            SqlQueryId = new Guid("fe3dfbb6-cf90-48ce-8d04-4f21ec145e59")
                        },
                        new
                        {
                            ScheduleId = new Guid("f703fac3-ccfa-4483-a5f6-4fb7bc6dafd8"),
                            SqlQueryId = new Guid("5a77003d-8ae7-475f-99bb-1e7a9c316116")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fed3c2a-e046-4760-aa62-654ef8a5e8f9"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 614, DateTimeKind.Utc).AddTicks(1974),
                            Host = "localhost",
                            IsActive = true,
                            Login = "sa",
                            Name = "Sql monitor server",
                            Password = "Pass_w0rd12",
                            Port = 1465,
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 614, DateTimeKind.Utc).AddTicks(3683),
                            UserId = new Guid("d2b248e2-07a5-4d2c-b4d4-d933a84ee5f6")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e333c79a-385a-4b6b-a87e-d7b05e7d15ca"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4162),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 1,
                            Query = "EXEC sp_databases",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4166)
                        },
                        new
                        {
                            Id = new Guid("00eac203-337f-46bf-91c4-413aee272bb3"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4213),
                            Description = "Needs to be executed with keyword use [DATABASE_NAME]. Database space information",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 3,
                            Query = "EXEC sp_spaceused @oneresultset = 1",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4214)
                        },
                        new
                        {
                            Id = new Guid("22e55d5b-bc47-4090-adf0-fe9f72ce43fb"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4217),
                            Description = "Databases backup status",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 2,
                            Query = @"SELECT d.name AS 'DATABASE_Name',
                          MAX(CASE WHEN bu.TYPE = 'D' THEN bu.LastBackupDate END) AS 'Full DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'I' THEN bu.LastBackupDate END) AS 'Differential DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'L' THEN bu.LastBackupDate END) AS 'Transaction DB Backup Status',
                          CASE d.recovery_model WHEN 1 THEN 'Full' WHEN 2 THEN 'Bulk Logged' WHEN 3 THEN 'Simple' END RecoveryModel
                          FROM MASTER.sys.databases d
                          LEFT OUTER JOIN (SELECT database_name, TYPE, MAX(backup_start_date) AS LastBackupDate
                          FROM msdb.dbo.backupset
                          GROUP BY database_name, TYPE) AS bu ON d.name = bu.database_name
                          GROUP BY d.Name, d.recovery_model",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4218)
                        },
                        new
                        {
                            Id = new Guid("fe3dfbb6-cf90-48ce-8d04-4f21ec145e59"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4221),
                            Description = "Finding users that are connected to the server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 4,
                            Query = @"SELECT login_name ,COUNT(session_id) AS session_count   
                          FROM sys.dm_exec_sessions
                          GROUP BY login_name; ",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4221)
                        },
                        new
                        {
                            Id = new Guid("5a77003d-8ae7-475f-99bb-1e7a9c316116"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4227),
                            Description = "Memory usage",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 6,
                            Query = @"SELECT object_name, counter_name, cntr_value
                            FROM sys.dm_os_performance_counters
                            WHERE [object_name] LIKE '%Buffer Manager%'
                            AND [counter_name] in ('Page life expectancy','Free list stalls/sec',
                            'Page reads/sec')",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4228)
                        },
                        new
                        {
                            Id = new Guid("1b03c565-4b9a-4809-bea8-c6e566263303"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4224),
                            Description = "The most CPU consumed 20 queries",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 5,
                            Query = @"SELECT TOP 20 query_stats.query_hash AS 'Query Hash',   
	                        	SUM(query_stats.total_worker_time) / SUM(query_stats.execution_count) AS 'Avg CPU Time',  
	                        	MIN(query_stats.statement_text) AS 'Statement Text'  
	                        FROM   
	                        	(SELECT QS.*,   
	                        	SUBSTRING(ST.text, (QS.statement_start_offset/2) + 1,  
	                        	((CASE statement_end_offset   
	                        		WHEN -1 THEN DATALENGTH(ST.text)  
	                        		ELSE QS.statement_end_offset END   
	                        			- QS.statement_start_offset)/2) + 1) AS statement_text  
	                        	 FROM sys.dm_exec_query_stats AS QS  
	                        	 CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) as ST) as query_stats  
	                        GROUP BY query_stats.query_hash  
	                        ORDER BY 2 DESC;  
                        ",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(4224)
                        },
                        new
                        {
                            Id = new Guid("0e0edf19-362e-4c0d-9059-41cb31c8c296"),
                            CreatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(1968),
                            Description = "The name of a server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 0,
                            Query = "SELECT SERVERPROPERTY('Servername') as ServerName",
                            UpdatedDate = new DateTime(2020, 3, 2, 20, 52, 56, 617, DateTimeKind.Utc).AddTicks(1996)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
