// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200304011232_Servers_And_Databases_Removed")]
    partial class Servers_And_Databases_Removed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e68a93e5-3455-4533-ad5a-3f6a28a1be6f"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 207, DateTimeKind.Utc).AddTicks(8429),
                            Interval = 4,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 3, 4, 1, 12, 32, 207, DateTimeKind.Local).AddTicks(9183),
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 207, DateTimeKind.Utc).AddTicks(8481)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("e68a93e5-3455-4533-ad5a-3f6a28a1be6f"),
                            SqlQueryId = new Guid("84c89c27-3037-42f0-8f5d-0b0f8beceb7c")
                        },
                        new
                        {
                            ScheduleId = new Guid("e68a93e5-3455-4533-ad5a-3f6a28a1be6f"),
                            SqlQueryId = new Guid("1971141a-c5cc-4feb-848e-ee0b54ac316c")
                        },
                        new
                        {
                            ScheduleId = new Guid("e68a93e5-3455-4533-ad5a-3f6a28a1be6f"),
                            SqlQueryId = new Guid("8d1226ed-8ee8-4300-acaf-fc262590d2ff")
                        },
                        new
                        {
                            ScheduleId = new Guid("e68a93e5-3455-4533-ad5a-3f6a28a1be6f"),
                            SqlQueryId = new Guid("9f008b81-3189-4354-bd32-97df11282de2")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84c89c27-3037-42f0-8f5d-0b0f8beceb7c"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6022),
                            Description = "Database space information",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 3,
                            Query = "sp_spaceused",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6041)
                        },
                        new
                        {
                            Id = new Guid("1971141a-c5cc-4feb-848e-ee0b54ac316c"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6101),
                            Description = "Databases backup status",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 2,
                            Query = @"SELECT d.name AS 'DATABASE_Name',
                          MAX(CASE WHEN bu.TYPE = 'D' THEN bu.LastBackupDate END) AS 'Full DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'I' THEN bu.LastBackupDate END) AS 'Differential DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'L' THEN bu.LastBackupDate END) AS 'Transaction DB Backup Status',
                          CASE d.recovery_model WHEN 1 THEN 'Full' WHEN 2 THEN 'Bulk Logged' WHEN 3 THEN 'Simple' END RecoveryModel
                          FROM MASTER.sys.databases d
                          LEFT OUTER JOIN (SELECT database_name, TYPE, MAX(backup_start_date) AS LastBackupDate
                          FROM msdb.dbo.backupset
                          GROUP BY database_name, TYPE) AS bu ON d.name = bu.database_name
                          GROUP BY d.Name, d.recovery_model",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6102)
                        },
                        new
                        {
                            Id = new Guid("8d1226ed-8ee8-4300-acaf-fc262590d2ff"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6106),
                            Description = "Finding users that are connected to the server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 4,
                            Query = @"SELECT login_name ,COUNT(session_id) AS session_count   
                          FROM sys.dm_exec_sessions
                          GROUP BY login_name; ",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6107)
                        },
                        new
                        {
                            Id = new Guid("9f008b81-3189-4354-bd32-97df11282de2"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6116),
                            Description = "Memory usage",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 6,
                            Query = @"SELECT object_name, counter_name, cntr_value
                            FROM sys.dm_os_performance_counters
                            WHERE [object_name] LIKE '%Buffer Manager%'
                            AND [counter_name] in ('Page life expectancy','Free list stalls/sec',
                            'Page reads/sec')",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6117)
                        },
                        new
                        {
                            Id = new Guid("0272a9d7-bc75-4a97-9ffb-b0f556898f16"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6109),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 1,
                            Query = "sp_databases",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6110)
                        },
                        new
                        {
                            Id = new Guid("584ba790-3b8b-469a-ab23-4481855d3e73"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6113),
                            Description = "The most CPU consumed 20 queries",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 5,
                            Query = @"SELECT TOP 20 query_stats.query_hash AS 'Query Hash',   
	                        	SUM(query_stats.total_worker_time) / SUM(query_stats.execution_count) AS 'Avg CPU Time',  
	                        	MIN(query_stats.statement_text) AS 'Statement Text'  
	                        FROM   
	                        	(SELECT QS.*,   
	                        	SUBSTRING(ST.text, (QS.statement_start_offset/2) + 1,  
	                        	((CASE statement_end_offset   
	                        		WHEN -1 THEN DATALENGTH(ST.text)  
	                        		ELSE QS.statement_end_offset END   
	                        			- QS.statement_start_offset)/2) + 1) AS statement_text  
	                        	 FROM sys.dm_exec_query_stats AS QS  
	                        	 CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) as ST) as query_stats  
	                        GROUP BY query_stats.query_hash  
	                        ORDER BY 2 DESC;  
                        ",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(6114)
                        },
                        new
                        {
                            Id = new Guid("0491bb83-b3c7-4b1a-8582-5ee49e4e5228"),
                            CreatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(1736),
                            Description = "The name of a server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 0,
                            Query = "SELECT SERVERPROPERTY('Servername') as ServerName",
                            UpdatedDate = new DateTime(2020, 3, 4, 1, 12, 32, 205, DateTimeKind.Utc).AddTicks(3517)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
