// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200226195918_Static_UserId_Server_Seed")]
    partial class Static_UserId_Server_Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32a547e4-5a2e-4725-b98b-dbe380d49d3f"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 298, DateTimeKind.Utc).AddTicks(9506),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 298, DateTimeKind.Utc).AddTicks(9526)
                        },
                        new
                        {
                            Id = new Guid("af1e4531-093b-488d-99ce-9aec3f61910e"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1474),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1480)
                        },
                        new
                        {
                            Id = new Guid("df88759e-522b-494a-9c75-16193966c094"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1566),
                            IsActive = true,
                            Name = "modeldb",
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1567)
                        },
                        new
                        {
                            Id = new Guid("f1d80e65-466a-4703-bad3-6bf685317ea0"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1608),
                            IsActive = true,
                            Name = "msdb",
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1609)
                        },
                        new
                        {
                            Id = new Guid("642a6fd2-9f8b-460b-914a-6d35da2789f4"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1632),
                            IsActive = true,
                            Name = "tempdb",
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(1633)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4be3e41e-f392-4e30-bf54-a01acc2de755"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 300, DateTimeKind.Utc).AddTicks(2752),
                            Interval = 5,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 2, 26, 19, 59, 18, 300, DateTimeKind.Local).AddTicks(3357),
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 300, DateTimeKind.Utc).AddTicks(2759)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("4be3e41e-f392-4e30-bf54-a01acc2de755"),
                            ServerId = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("4be3e41e-f392-4e30-bf54-a01acc2de755"),
                            SqlQueryId = new Guid("a69a2b43-3abe-450f-a354-5456a93e4649")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db49da15-c17a-43a9-9ed7-08b6693f7865"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 297, DateTimeKind.Utc).AddTicks(501),
                            Host = "localhost",
                            IsActive = true,
                            Login = "sa",
                            Name = "Sql monitor server",
                            Password = "Pass_w0rd12",
                            Port = 1465,
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 297, DateTimeKind.Utc).AddTicks(2161),
                            UserId = new Guid("d2b248e2-07a5-4d2c-b4d4-d933a84ee5f6")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a69a2b43-3abe-450f-a354-5456a93e4649"),
                            CreatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(4756),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = "sp_databases",
                            Query = "sp_databases",
                            UpdatedDate = new DateTime(2020, 2, 26, 19, 59, 18, 299, DateTimeKind.Utc).AddTicks(4780)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
