// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200225161342_Schedule_Added")]
    partial class Schedule_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleDatabase", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DatabaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "DatabaseId");

                    b.HasIndex("DatabaseId");

                    b.ToTable("ScheduleDatabase");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0eaabcad-bea5-4de2-ac61-bd8ed071bf3f"),
                            CreatedDate = new DateTime(2020, 2, 25, 16, 13, 41, 602, DateTimeKind.Utc).AddTicks(6111),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = "sp_databases",
                            Query = "sp_databases",
                            UpdatedDate = new DateTime(2020, 2, 25, 16, 13, 41, 602, DateTimeKind.Utc).AddTicks(7849)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleDatabase", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Database", "Database")
                        .WithMany("ScheduleDatabases")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleDatabases")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", null)
                        .WithMany("SqlQueries")
                        .HasForeignKey("ScheduleId");
                });
#pragma warning restore 612, 618
        }
    }
}
