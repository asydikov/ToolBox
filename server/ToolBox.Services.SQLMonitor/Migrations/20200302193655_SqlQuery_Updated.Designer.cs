// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolBox.Services.SQLMonitor.EF;

namespace ToolBox.Services.SQLMonitor.Migrations
{
    [DbContext(typeof(SqlMonitorDbContext))]
    [Migration("20200302193655_SqlQuery_Updated")]
    partial class SqlQuery_Updated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ada3e863-3582-4b1a-94cc-178a09dc7703"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(2667),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(2697)
                        },
                        new
                        {
                            Id = new Guid("09b7f067-7c85-44dc-adf7-358d9ff33192"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5016),
                            IsActive = true,
                            Name = "SqlMonitor",
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5022)
                        },
                        new
                        {
                            Id = new Guid("dcd9b218-fb1d-48a1-b850-a172c48c40f4"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5103),
                            IsActive = true,
                            Name = "modeldb",
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5104)
                        },
                        new
                        {
                            Id = new Guid("c99fe396-b733-4dba-921f-8ac9c7dcb922"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5144),
                            IsActive = true,
                            Name = "msdb",
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5146)
                        },
                        new
                        {
                            Id = new Guid("f6894cd4-7c63-4d6c-b05b-7b817b50ebe8"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5167),
                            IsActive = true,
                            Name = "tempdb",
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(5168)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForServer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastInvokedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(7948),
                            Interval = 5,
                            IsActive = true,
                            IsForServer = true,
                            LastInvokedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Local).AddTicks(8572),
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(7955)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ScheduleServer");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            ServerId = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SqlQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "SqlQueryId");

                    b.HasIndex("SqlQueryId");

                    b.ToTable("ScheduleSqlQuery");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            SqlQueryId = new Guid("cc987ef0-191a-44ca-a6bf-f0d9913638e0")
                        },
                        new
                        {
                            ScheduleId = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            SqlQueryId = new Guid("c3af5cb3-f987-4c9e-a9a8-7a8dab22c9ce")
                        },
                        new
                        {
                            ScheduleId = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            SqlQueryId = new Guid("66136544-7582-481a-8bd9-7b99d8a8865f")
                        },
                        new
                        {
                            ScheduleId = new Guid("1579e6f3-24bd-4f60-9a93-de89ca91a5ce"),
                            SqlQueryId = new Guid("3f5d446b-4a69-40e9-9432-9ae20d0c74cf")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("773e13be-10e3-4dfb-9c40-01e34e78d759"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 899, DateTimeKind.Utc).AddTicks(3796),
                            Host = "localhost",
                            IsActive = true,
                            Login = "sa",
                            Name = "Sql monitor server",
                            Password = "Pass_w0rd12",
                            Port = 1465,
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 899, DateTimeKind.Utc).AddTicks(5527),
                            UserId = new Guid("d2b248e2-07a5-4d2c-b4d4-d933a84ee5f6")
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.SqlQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoredProcedure")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SQLQueries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc987ef0-191a-44ca-a6bf-f0d9913638e0"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(9665),
                            Description = "The name of a server",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 0,
                            Query = "select SERVERPROPERTY('Servername') as ServerName",
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 901, DateTimeKind.Utc).AddTicks(9691)
                        },
                        new
                        {
                            Id = new Guid("c3af5cb3-f987-4c9e-a9a8-7a8dab22c9ce"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1746),
                            Description = "List of Database names in a server",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 1,
                            Query = "EXEC sp_databases",
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1751)
                        },
                        new
                        {
                            Id = new Guid("66136544-7582-481a-8bd9-7b99d8a8865f"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1842),
                            Description = "Needs to be executed with keyword use [DATABASE_NAME]. Database space information",
                            IsActive = true,
                            IsStoredProcedure = true,
                            Name = 3,
                            Query = "EXEC sp_spaceused @oneresultset = 1",
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1844)
                        },
                        new
                        {
                            Id = new Guid("3f5d446b-4a69-40e9-9432-9ae20d0c74cf"),
                            CreatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1847),
                            Description = "Databases backup status",
                            IsActive = true,
                            IsStoredProcedure = false,
                            Name = 2,
                            Query = @"SELECT d.name AS 'DATABASE_Name',
                          MAX(CASE WHEN bu.TYPE = 'D' THEN bu.LastBackupDate END) AS 'Full DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'I' THEN bu.LastBackupDate END) AS 'Differential DB Backup Status',
                          MAX(CASE WHEN bu.TYPE = 'L' THEN bu.LastBackupDate END) AS 'Transaction DB Backup Status',
                          CASE d.recovery_model WHEN 1 THEN 'Full' WHEN 2 THEN 'Bulk Logged' WHEN 3 THEN 'Simple' END RecoveryModel
                          FROM MASTER.sys.databases d
                          LEFT OUTER JOIN (SELECT database_name, TYPE, MAX(backup_start_date) AS LastBackupDate
                          FROM msdb.dbo.backupset
                          GROUP BY database_name, TYPE) AS bu ON d.name = bu.database_name
                          GROUP BY d.Name, d.recovery_model",
                            UpdatedDate = new DateTime(2020, 3, 2, 19, 36, 54, 902, DateTimeKind.Utc).AddTicks(1848)
                        });
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.Database", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleServer", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Server", "Server")
                        .WithMany("ScheduleServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolBox.Services.SQLMonitor.Entities.ScheduleSqlQuery", b =>
                {
                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolBox.Services.SQLMonitor.Entities.SqlQuery", "SqlQuery")
                        .WithMany("ScheduleSqlQueries")
                        .HasForeignKey("SqlQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
